{
  "manifest": {
    "name": "cacheable",
    "version": "1.9.0",
    "description": "High Performance Layer 1 / Layer 2 Caching with Keyv Storage",
    "type": "module",
    "main": "./dist/index.cjs",
    "module": "./dist/index.js",
    "types": "./dist/index.d.ts",
    "exports": {
      ".": {
        "require": "./dist/index.cjs",
        "import": "./dist/index.js"
      }
    },
    "repository": {
      "type": "git",
      "url": "git+https://github.com/jaredwray/cacheable.git",
      "directory": "packages/cacheable"
    },
    "author": {
      "name": "Jared Wray",
      "email": "me@jaredwray.com"
    },
    "license": "MIT",
    "private": false,
    "devDependencies": {
      "@faker-js/faker": "^9.7.0",
      "@keyv/redis": "^4.4.0",
      "@types/node": "^22.15.3",
      "@vitest/coverage-v8": "^3.1.3",
      "lru-cache": "^11.1.0",
      "rimraf": "^6.0.1",
      "tsup": "^8.4.0",
      "typescript": "^5.8.3",
      "vitest": "^3.1.3",
      "xo": "^0.60.0"
    },
    "dependencies": {
      "hookified": "^1.8.2",
      "keyv": "^5.3.3"
    },
    "keywords": [
      "cacheable",
      "high performance",
      "layer 1 caching",
      "layer 2 caching",
      "distributed caching",
      "Keyv storage engine",
      "memory caching",
      "LRU cache",
      "expiration",
      "CacheableMemory",
      "offline support",
      "distributed sync",
      "secondary store",
      "primary store",
      "non-blocking operations",
      "cache statistics",
      "layered caching",
      "fault tolerant",
      "scalable cache",
      "in-memory cache",
      "distributed cache",
      "lruSize",
      "lru",
      "multi-tier cache"
    ],
    "files": [
      "dist",
      "LICENSE"
    ],
    "scripts": {
      "build": "rimraf ./dist && tsup src/index.ts --format cjs,esm --dts --clean",
      "prepublish": "pnpm build",
      "test": "xo --fix && vitest run --coverage",
      "test:ci": "xo && vitest run",
      "clean": "rimraf ./dist ./coverage ./node_modules"
    },
    "_registry": "npm",
    "_loc": "/data/data/com.termux/files/home/.cache/yarn/v6/npm-cacheable-1.9.0-57e3565c311d66371eeb5f2070b6615d43b89711-integrity/node_modules/cacheable/package.json",
    "readmeFilename": "README.md",
    "readme": "[<img align=\"center\" src=\"https://cacheable.org/logo.svg\" alt=\"Cacheable\" />](https://github.com/jaredwray/cacheable)\n\n> High Performance Layer 1 / Layer 2 Caching with Keyv Storage\n\n[![codecov](https://codecov.io/gh/jaredwray/cacheable/graph/badge.svg?token=lWZ9OBQ7GM)](https://codecov.io/gh/jaredwray/cacheable)\n[![tests](https://github.com/jaredwray/cacheable/actions/workflows/tests.yml/badge.svg)](https://github.com/jaredwray/cacheable/actions/workflows/tests.yml)\n[![npm](https://img.shields.io/npm/dm/cacheable.svg)](https://www.npmjs.com/package/cacheable)\n[![npm](https://img.shields.io/npm/v/cacheable)](https://www.npmjs.com/package/cacheable)\n[![license](https://img.shields.io/github/license/jaredwray/cacheable)](https://github.com/jaredwray/cacheable/blob/main/LICENSE)\n\n`cacheable` is a high performance layer 1 / layer 2 caching engine that is focused on distributed caching with enterprise features such as `CacheSync` (coming soon). It is built on top of the robust storage engine [Keyv](https://keyv.org) and provides a simple API to cache and retrieve data.\n\n* Simple to use with robust API\n* Not bloated with additional modules\n* Scalable and trusted storage engine by Keyv\n* Memory Caching with LRU and Expiration `CacheableMemory`\n* Resilient to failures with try/catch and offline\n* Wrap / Memoization for Sync and Async Functions with Stampede Protection\n* Hooks and Events to extend functionality\n* Shorthand for ttl in milliseconds `(1m = 60000) (1h = 3600000) (1d = 86400000)`\n* Non-blocking operations for layer 2 caching\n* Distributed Caching Sync via Pub/Sub (coming soon)\n* Comprehensive testing and code coverage\n* ESM and CommonJS support with Typescript\n* Maintained and supported regularly\n\n# Table of Contents\n* [Getting Started](#getting-started)\n* [Basic Usage](#basic-usage)\n* [Hooks and Events](#hooks-and-events)\n* [Storage Tiering and Caching](#storage-tiering-and-caching)\n* [TTL Propagation and Storage Tiering](#ttl-propagation-and-storage-tiering)\n* [Shorthand for Time to Live (ttl)](#shorthand-for-time-to-live-ttl)\n* [Non-Blocking Operations](#non-blocking-operations)\n* [CacheSync - Distributed Updates](#cachesync---distributed-updates)\n* [Cacheable Options](#cacheable-options)\n* [Cacheable Statistics (Instance Only)](#cacheable-statistics-instance-only)\n* [Cacheable - API](#cacheable---api)\n* [CacheableMemory - In-Memory Cache](#cacheablememory---in-memory-cache)\n* [CacheableMemory Options](#cacheablememory-options)\n* [CacheableMemory - API](#cacheablememory---api)\n* [Keyv Storage Adapter - KeyvCacheableMemory](#keyv-storage-adapter---keyvcacheablememory)\n* [Wrap / Memoization for Sync and Async Functions](#wrap--memoization-for-sync-and-async-functions)\n* [How to Contribute](#how-to-contribute)\n* [License and Copyright](#license-and-copyright)\n\n# Getting Started\n\n`cacheable` is primarily used as an extension to you caching engine with a robust storage backend [Keyv](https://keyv.org), Memonization (Wrap), Hooks, Events, and Statistics.\n\n```bash\nnpm install cacheable\n```\n\n# Basic Usage\n\n```javascript\nimport { Cacheable } from 'cacheable';\n\nconst cacheable = new Cacheable();\nawait cacheable.set('key', 'value', 1000);\nconst value = await cacheable.get('key');\n```\n\nThis is a basic example where you are only using the in-memory storage engine. To enable layer 1 and layer 2 caching you can use the `secondary` property in the options:\n\n```javascript\nimport { Cacheable } from 'cacheable';\nimport KeyvRedis from '@keyv/redis';\n\nconst secondary = new KeyvRedis('redis://user:pass@localhost:6379');\nconst cache = new Cacheable({secondary});\n``` \n\nIn this example, the primary store we will use `lru-cache` and the secondary store is Redis. You can also set multiple stores in the options:\n\n```javascript\nimport { Cacheable } from 'cacheable';\nimport { Keyv } from 'keyv';\nimport KeyvRedis from '@keyv/redis';\nimport { LRUCache } from 'lru-cache'\n\nconst primary = new Keyv({store: new LRUCache()});\nconst secondary = new KeyvRedis('redis://user:pass@localhost:6379');\nconst cache = new Cacheable({primary, secondary});\n```\n\nThis is a more advanced example and not needed for most use cases.\n\n# Hooks and Events\n\nThe following hooks are available for you to extend the functionality of `cacheable` via `CacheableHooks` enum:\n\n* `BEFORE_SET`: This is called before the `set()` method is called.\n* `AFTER_SET`: This is called after the `set()` method is called.\n* `BEFORE_SET_MANY`: This is called before the `setMany()` method is called.\n* `AFTER_SET_MANY`: This is called after the `setMany()` method is called.\n* `BEFORE_GET`: This is called before the `get()` method is called.\n* `AFTER_GET`: This is called after the `get()` method is called.\n* `BEFORE_GET_MANY`: This is called before the `getMany()` method is called.\n* `AFTER_GET_MANY`: This is called after the `getMany()` method is called.\n* `BEFORE_SECONDARY_SETS_PRIMARY`: This is called when the secondary store sets the value in the primary store.\n\nAn example of how to use these hooks:\n\n```javascript\nimport { Cacheable, CacheableHooks } from 'cacheable';\n\nconst cacheable = new Cacheable();\ncacheable.onHook(CacheableHooks.BEFORE_SET, (data) => {\n  console.log(`before set: ${data.key} ${data.value}`);\n});\n```\n\nHere is an example of how to use `BEFORE_SECONDARY_SETS_PRIMARY` hook:\n\n```javascript\nimport { Cacheable, CacheableHooks } from 'cacheable';\nimport KeyvRedis from '@keyv/redis';\nconst secondary = new KeyvRedis('redis://user:pass@localhost:6379');\nconst cache = new Cacheable({secondary});\ncache.onHook(CacheableHooks.BEFORE_SECONDARY_SETS_PRIMARY, (data) => {\n  console.log(`before secondary sets primary: ${data.key} ${data.value} ${data.ttl}`);\n});\n```\nThis is called when the secondary store sets the value in the primary store. This is useful if you want to do something before the value is set in the primary store such as manipulating the ttl or the value.\n\n# Storage Tiering and Caching\n\n`cacheable` is built as a layer 1 and layer 2 caching engine by default. The purpose is to have your layer 1 be fast and your layer 2 be more persistent. The primary store is the layer 1 cache and the secondary store is the layer 2 cache. By adding the secondary store you are enabling layer 2 caching. By default the operations are blocking but fault tolerant:\n\n* `Setting Data`: Sets the value in the primary store and then the secondary store.\n* `Getting Data`: Gets the value from the primary if the value does not exist it will get it from the secondary store and set it in the primary store.\n* `Deleting Data`: Deletes the value from the primary store and secondary store at the same time waiting for both to respond.\n* `Clearing Data`: Clears the primary store and secondary store at the same time waiting for both to respond.\n\nWhen `Getting Data` if the value does not exist in the primary store it will try to get it from the secondary store. If the secondary store returns the value it will set it in the primary store. Because we use [TTL Propagation](#ttl-propagation-and-storage-tiering) the value will be set in the primary store with the TTL of the secondary store unless the time to live (TTL) is greater than the primary store which will then use the TTL of the primary store. An example of this is:\n\n```javascript\nimport { Cacheable } from 'cacheable';\nimport KeyvRedis from '@keyv/redis';\nconst secondary = new KeyvRedis('redis://user:pass@localhost:6379', { ttl: 1000 });\nconst cache = new Cacheable({secondary, ttl: 100});\n\nawait cache.set('key', 'value'); // sets the value in the primary store with a ttl of 100 ms and secondary store with a ttl of 1000 ms\n\nawait sleep(500); // wait for .5 seconds\n\nconst value = await cache.get('key'); // gets the value from the secondary store and now sets the value in the primary store with a ttl of 500 ms which is what is left from the secondary store\n```\n\nIn this example the primary store has a ttl of `100 ms` and the secondary store has a ttl of `1000 ms`. Because the ttl is greater in the secondary store it will default to setting ttl value in the primary store.\n\n```javascript\nimport { Cacheable } from 'cacheable';\nimport {Keyv} from 'keyv';\nimport KeyvRedis from '@keyv/redis';\nconst primary = new Keyv({ ttl: 200 });\nconst secondary = new KeyvRedis('redis://user:pass@localhost:6379', { ttl: 1000 });\nconst cache = new Cacheable({primary, secondary});\n\nawait cache.set('key', 'value'); // sets the value in the primary store with a ttl of 100 ms and secondary store with a ttl of 1000 ms\n\nawait sleep(200); // wait for .2 seconds\n\nconst value = await cache.get('key'); // gets the value from the secondary store and now sets the value in the primary store with a ttl of 200 ms which is what the primary store is set with\n```\n\n# TTL Propagation and Storage Tiering\n\nCacheable TTL propagation is a feature that allows you to set a time to live (TTL) for the cache. By default the TTL is set in the following order:\n\n```\nttl = set at the function ?? storage adapter ttl ?? cacheable ttl\n```\n\nThis means that if you set a TTL at the function level it will override the storage adapter TTL and the cacheable TTL. If you do not set a TTL at the function level it will use the storage adapter TTL and then the cacheable TTL. If you do not set a TTL at all it will use the default TTL of `undefined` which is disabled.\n\n# Shorthand for Time to Live (ttl)\n\nBy default `Cacheable` and `CacheableMemory` the `ttl` is in milliseconds but you can use shorthand for the time to live. Here are the following shorthand values:\n\n* `ms`: Milliseconds such as (1ms = 1)\n* `s`: Seconds such as (1s = 1000)\n* `m`: Minutes such as (1m = 60000)\n* `h` or `hr`: Hours such as (1h = 3600000)\n* `d`: Days such as (1d = 86400000)\n\nHere is an example of how to use the shorthand for the `ttl`:\n\n```javascript\nimport { Cacheable } from 'cacheable';\nconst cache = new Cacheable({ ttl: '15m' }); //sets the default ttl to 15 minutes (900000 ms)\ncache.set('key', 'value', '1h'); //sets the ttl to 1 hour (3600000 ms) and overrides the default\n```\n\nif you want to disable the `ttl` you can set it to `0` or `undefined`:\n\n```javascript\nimport { Cacheable } from 'cacheable';\nconst cache = new Cacheable({ ttl: 0 }); //sets the default ttl to 0 which is disabled\ncache.set('key', 'value', 0); //sets the ttl to 0 which is disabled\n```\n\nIf you set the ttl to anything below `0` or `undefined` it will disable the ttl for the cache and the value that returns will be `undefined`. With no ttl set the value will be stored `indefinitely`.\n\n```javascript\nimport { Cacheable } from 'cacheable';\nconst cache = new Cacheable({ ttl: 0 }); //sets the default ttl to 0 which is disabled\nconsole.log(cache.ttl); // undefined\ncache.ttl = '1h'; // sets the default ttl to 1 hour (3600000 ms)\nconsole.log(cache.ttl); // '1h'\ncache.ttl = -1; // sets the default ttl to 0 which is disabled\nconsole.log(cache.ttl); // undefined\n```\n\n## Retrieving raw cache entries\n\nThe `get` and `getMany` methods support a `raw` option, which returns the full stored metadata (`StoredDataRaw<T>`) instead of just the value:\n\n```typescript\nimport { Cacheable } from 'cacheable';\n\nconst cache = new Cacheable();\n\n// store a value\nawait cache.set('user:1', { name: 'Alice' });\n\n// default: only the value\nconst user = await cache.get<{ name: string }>('user:1');\nconsole.log(user); // { name: 'Alice' }\n\n// with raw: full record including expiration\nconst raw = await cache.get<{ name: string }>('user:1', { raw: true });\nconsole.log(raw.value);   // { name: 'Alice' }\nconsole.log(raw.expires); // e.g. 1677628495000 or null\n```\n\n```typescript\n// getMany with raw option\nawait cache.set('a', 1);\nawait cache.set('b', 2);\n\nconst raws = await cache.getMany<number>(['a', 'b'], { raw: true });\nraws.forEach((entry, idx) => {\n  console.log(`key=${['a','b'][idx]}, value=${entry?.value}, expires=${entry?.expires}`);\n});\n```\n\n\n# Non-Blocking Operations\n\nIf you want your layer 2 (secondary) store to be non-blocking you can set the `nonBlocking` property to `true` in the options. This will make the secondary store non-blocking and will not wait for the secondary store to respond on `setting data`, `deleting data`, or `clearing data`. This is useful if you want to have a faster response time and not wait for the secondary store to respond.\n\n```javascript\nimport { Cacheable } from 'cacheable';\nimport {KeyvRedis} from '@keyv/redis';\n\nconst secondary = new KeyvRedis('redis://user:pass@localhost:6379');\nconst cache = new Cacheable({secondary, nonBlocking: true});\n```\n\n# CacheSync - Distributed Updates\n\n`cacheable` has a feature called `CacheSync` that is coming soon. This feature will allow you to have distributed caching with Pub/Sub. This will allow you to have multiple instances of `cacheable` running and when a value is set, deleted, or cleared it will update all instances of `cacheable` with the same value. Current plan is to support the following:\n\n* [AWS SQS](https://aws.amazon.com/sqs)\n* [RabbitMQ](https://www.rabbitmq.com)\n* [Nats](https://nats.io)\n* [Azure Service Bus](https://azure.microsoft.com/en-us/services/service-bus)\n* [Redis Pub/Sub](https://redis.io/topics/pubsub)\n\nThis feature should be live by end of year. \n\n# Cacheable Options\n\nThe following options are available for you to configure `cacheable`:\n\n* `primary`: The primary store for the cache (layer 1) defaults to in-memory by Keyv.\n* `secondary`: The secondary store for the cache (layer 2) usually a persistent cache by Keyv.\n* `nonBlocking`: If the secondary store is non-blocking. Default is `false`.\n* `stats`: To enable statistics for this instance. Default is `false`.\n* `ttl`: The default time to live for the cache in milliseconds. Default is `undefined` which is disabled.\n* `namespace`: The namespace for the cache. Default is `undefined`.\n\n# Cacheable Statistics (Instance Only)\n\nIf you want to enable statistics for your instance you can set the `.stats.enabled` property to `true` in the options. This will enable statistics for your instance and you can get the statistics by calling the `stats` property. Here are the following property statistics:\n\n* `hits`: The number of hits in the cache.\n* `misses`: The number of misses in the cache.\n* `sets`: The number of sets in the cache.\n* `deletes`: The number of deletes in the cache.\n* `clears`: The number of clears in the cache.\n* `errors`: The number of errors in the cache.\n* `count`: The number of keys in the cache.\n* `vsize`: The estimated byte size of the values in the cache.\n* `ksize`: The estimated byte size of the keys in the cache.\n\nYou can clear / reset the stats by calling the `.stats.reset()` method.\n\n_This does not enable statistics for your layer 2 cache as that is a distributed cache_.\n\n# Cacheable - API\n\n* `set(key, value, ttl?)`: Sets a value in the cache.\n* `setMany([{key, value, ttl?}])`: Sets multiple values in the cache.\n* `get(key)`: Gets a value from the cache.\n* `get(key, { raw: true })`: Gets a raw value from the cache.\n* `getMany([keys])`: Gets multiple values from the cache.\n* `getMany([keys], { raw: true })`: Gets multiple raw values from the cache.\n* `has(key)`: Checks if a value exists in the cache.\n* `hasMany([keys])`: Checks if multiple values exist in the cache.\n* `take(key)`: Takes a value from the cache and deletes it.\n* `takeMany([keys])`: Takes multiple values from the cache and deletes them.\n* `delete(key)`: Deletes a value from the cache.\n* `deleteMany([keys])`: Deletes multiple values from the cache.\n* `clear()`: Clears the cache stores. Be careful with this as it will clear both layer 1 and layer 2.\n* `wrap(function, WrapOptions)`: Wraps an `async` function in a cache.\n* `disconnect()`: Disconnects from the cache stores.\n* `onHook(hook, callback)`: Sets a hook.\n* `removeHook(hook)`: Removes a hook.\n* `on(event, callback)`: Listens for an event.\n* `removeListener(event, callback)`: Removes a listener.\n* `hash(object: any, algorithm = 'sha256'): string`: Hashes an object with the algorithm. Default is `sha256`.\n* `primary`: The primary store for the cache (layer 1) defaults to in-memory by Keyv.\n* `secondary`: The secondary store for the cache (layer 2) usually a persistent cache by Keyv.\n* `namespace`: The namespace for the cache. Default is `undefined`. This will set the namespace for the primary and secondary stores.\n* `nonBlocking`: If the secondary store is non-blocking. Default is `false`.\n* `stats`: The statistics for this instance which includes `hits`, `misses`, `sets`, `deletes`, `clears`, `errors`, `count`, `vsize`, `ksize`.\n\n# CacheableMemory - In-Memory Cache\n\n`cacheable` comes with a built-in in-memory cache called `CacheableMemory`. This is a simple in-memory cache that is used as the primary store for `cacheable`. You can use this as a standalone cache or as a primary store for `cacheable`. Here is an example of how to use `CacheableMemory`:\n\n```javascript\nimport { CacheableMemory } from 'cacheable';\nconst options = {\n  ttl: '1h', // 1 hour\n  useClones: true, // use clones for the values (default is true)\n  lruSize: 1000, // the size of the LRU cache (default is 0 which is unlimited)\n}\nconst cache = new CacheableMemory(options);\ncache.set('key', 'value');\nconst value = cache.get('key'); // value\n```\n\nYou can use `CacheableMemory` as a standalone cache or as a primary store for `cacheable`. You can also set the `useClones` property to `false` if you want to use the same reference for the values. This is useful if you are using large objects and want to save memory. The `lruSize` property is the size of the LRU cache and is set to `0` by default which is unlimited. When setting the `lruSize` property it will limit the number of keys in the cache.\n\nThis simple in-memory cache uses multiple Map objects and a with `expiration` and `lru` policies if set to manage the in memory cache at scale.\n\nBy default we use lazy expiration deletion which means on `get` and `getMany` type functions we look if it is expired and then delete it. If you want to have a more aggressive expiration policy you can set the `checkInterval` property to a value greater than `0` which will check for expired keys at the interval you set.\n\n## CacheableMemory Options\n\n* `ttl`: The time to live for the cache in milliseconds. Default is `undefined` which is means indefinitely.\n* `useClones`: If the cache should use clones for the values. Default is `true`.\n* `lruSize`: The size of the LRU cache. Default is `0` which is unlimited.\n* `checkInterval`: The interval to check for expired keys in milliseconds. Default is `0` which is disabled.\n\n## CacheableMemory - API\n\n* `set(key, value, ttl?)`: Sets a value in the cache.\n* `setMany([{key, value, ttl?}])`: Sets multiple values in the cache from `CacheableItem`.\n* `get(key)`: Gets a value from the cache.\n* `getMany([keys])`: Gets multiple values from the cache.\n* `getRaw(key)`: Gets a value from the cache as `CacheableStoreItem`.\n* `getManyRaw([keys])`: Gets multiple values from the cache as `CacheableStoreItem`.\n* `has(key)`: Checks if a value exists in the cache.\n* `hasMany([keys])`: Checks if multiple values exist in the cache.\n* `delete(key)`: Deletes a value from the cache.\n* `deleteMany([keys])`: Deletes multiple values from the cache.\n* `take(key)`: Takes a value from the cache and deletes it.\n* `takeMany([keys])`: Takes multiple values from the cache and deletes them.\n* `wrap(function, WrapSyncOptions)`: Wraps a `sync` function in a cache.\n* `clear()`: Clears the cache.\n* `size()`: The number of keys in the cache.\n* `keys()`: The keys in the cache.\n* `items()`: The items in the cache as `CacheableStoreItem` example `{ key, value, expires? }`.\n* `checkExpired()`: Checks for expired keys in the cache. This is used by the `checkInterval` property.\n* `startIntervalCheck()`: Starts the interval check for expired keys if `checkInterval` is above 0 ms.\n* `stopIntervalCheck()`: Stops the interval check for expired keys.\n* `hash(object: any, algorithm = 'sha256'): string`: Hashes an object with the algorithm. Default is `sha256`.\n\n# Keyv Storage Adapter - KeyvCacheableMemory\n\n`cacheable` comes with a built-in storage adapter for Keyv called `KeyvCacheableMemory`. This takes `CacheableMemory` and creates a storage adapter for Keyv. This is useful if you want to use `CacheableMemory` as a storage adapter for Keyv. Here is an example of how to use `KeyvCacheableMemory`:\n\n```javascript\nimport { Keyv } from 'keyv';\nimport { KeyvCacheableMemory } from 'cacheable';\n\nconst keyv = new Keyv({ store: new KeyvCacheableMemory() });\nawait keyv.set('foo', 'bar');\nconst value = await keyv.get('foo');\nconsole.log(value); // bar \n```\n\n# Wrap / Memoization for Sync and Async Functions\n\n`Cacheable` and `CacheableMemory` has a feature called `wrap` that allows you to wrap a function in a cache. This is useful for memoization and caching the results of a function. You can wrap a `sync` or `async` function in a cache. Here is an example of how to use the `wrap` function:\n\n```javascript\nimport { Cacheable } from 'cacheable';\nconst asyncFunction = async (value: number) => {\n  return Math.random() * value;\n};\n\nconst cache = new Cacheable();\nconst options = {\n  ttl: '1h', // 1 hour\n  keyPrefix: 'p1', // key prefix. This is used if you have multiple functions and need to set a unique prefix.\n}\nconst wrappedFunction = cache.wrap(asyncFunction, options);\nconsole.log(await wrappedFunction(2)); // 4\nconsole.log(await wrappedFunction(2)); // 4 from cache\n```\nWith `Cacheable` we have also included stampede protection so that a `Promise` based call will only be called once if multiple requests of the same are executed at the same time. Here is an example of how to test for stampede protection:\n  \n```javascript\nimport { Cacheable } from 'cacheable';\nconst asyncFunction = async (value: number) => {\n  return value;\n};\n\nconst cache = new Cacheable();\nconst options = {\n  ttl: '1h', // 1 hour\n  keyPrefix: 'p1', // key prefix. This is used if you have multiple functions and need to set a unique prefix.\n}\n\nconst wrappedFunction = cache.wrap(asyncFunction, options);\nconst promises = [];\nfor (let i = 0; i < 10; i++) {\n  promises.push(wrappedFunction(i));\n}\n\nconst results = await Promise.all(promises); // all results should be the same\n\nconsole.log(results); // [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n```\n\nIn this example we are wrapping an `async` function in a cache with a `ttl` of `1 hour`. This will cache the result of the function for `1 hour` and then expire the value. You can also wrap a `sync` function in a cache:\n\n```javascript\nimport { CacheableMemory } from 'cacheable';\nconst syncFunction = (value: number) => {\n  return value * 2;\n};\n\nconst cache = new CacheableMemory();\nconst wrappedFunction = cache.wrap(syncFunction, { ttl: '1h', key: 'syncFunction' });\nconsole.log(wrappedFunction(2)); // 4\nconsole.log(wrappedFunction(2)); // 4 from cache\n```\n\nIn this example we are wrapping a `sync` function in a cache with a `ttl` of `1 hour`. This will cache the result of the function for `1 hour` and then expire the value. You can also set the `key` property in the `wrap()` options to set a custom key for the cache.\n\nWhen an error occurs in the function it will not cache the value and will return the error. This is useful if you want to cache the results of a function but not cache the error. If you want it to cache the error you can set the `cacheError` property to `true` in the `wrap()` options. This is disabled by default.\n\n```javascript\nimport { CacheableMemory } from 'cacheable';\nconst syncFunction = (value: number) => {\n  throw new Error('error');\n};\n\nconst cache = new CacheableMemory();\nconst wrappedFunction = cache.wrap(syncFunction, { ttl: '1h', key: 'syncFunction', cacheError: true });\nconsole.log(wrappedFunction()); // error\nconsole.log(wrappedFunction()); // error from cache\n```\n\n# How to Contribute\n\nYou can contribute by forking the repo and submitting a pull request. Please make sure to add tests and update the documentation. To learn more about how to contribute go to our main README [https://github.com/jaredwray/cacheable](https://github.com/jaredwray/cacheable). This will talk about how to `Open a Pull Request`, `Ask a Question`, or `Post an Issue`.\n\n# License and Copyright\n[MIT © Jared Wray](./LICENSE)",
    "licenseText": "MIT License & © Jared Wray \n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to\ndeal in the Software without restriction, including without limitation the\nrights to use, copy, modify, merge, publish, distribute, sublicense, and/or\nsell copies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\nDEALINGS IN THE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/cacheable/-/cacheable-1.9.0.tgz#57e3565c311d66371eeb5f2070b6615d43b89711",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/cacheable/-/cacheable-1.9.0.tgz",
    "hash": "57e3565c311d66371eeb5f2070b6615d43b89711",
    "integrity": "sha512-8D5htMCxPDUULux9gFzv30f04Xo3wCnik0oOxKoRTPIBoqA7HtOcJ87uBhQTs3jCfZZTrUBGsYIZOgE0ZRgMAg==",
    "registry": "npm",
    "packageName": "cacheable",
    "cacheIntegrity": "sha512-8D5htMCxPDUULux9gFzv30f04Xo3wCnik0oOxKoRTPIBoqA7HtOcJ87uBhQTs3jCfZZTrUBGsYIZOgE0ZRgMAg== sha1-V+NWXDEdZjce618gcLZhXUO4lxE="
  },
  "registry": "npm",
  "hash": "57e3565c311d66371eeb5f2070b6615d43b89711"
}